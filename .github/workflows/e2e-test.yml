name: Manual workflow

on:
  push:
    branches: [main, e2e-test]
  workflow_dispatch:
  release:

env: 
  TEST_ORG: org-workflow-test-organization 

jobs:
  test-github-app:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        APP_ID: [93678, 93006] # [staging, production]
    steps:
      - name: generate random repository name and content
        id: random
        run: |
          echo ::set-output name=repo::$(openssl rand -hex 3)
          echo ::set-output name=content::$(echo -n 'test commit' | openssl base64)
      - name: create repository
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.CI_TEST_TOKEN }}
          script: |
            const repoName = Math.random().toString(36).substring(7)
            const buffer = new Buffer('Test commit');
            const content = buffer.toString('base64');

            // Create repository
            await github.repos.createInOrg({
              org: "${{ env.TEST_ORG }}",
              name: repoName
            });

            // Push content
            const result = await github.repos.createOrUpdateFileContents({
              owner: "${{ env.TEST_ORG }}",
              repo: repoName,
              path: "test-file.md",
              message: "Test commit for https://github.com/SvanBoxel/organization-workflows",
              content: content,
              commiter: {
                name: "github-actions[bot]",
                email: "github-actions[bot]@users.noreply.github.com"
              }
            });

            // Wait 40 seconds
            await new Promise(r => setTimeout(r, 40000));

            // Check whether commit check is created
            const checkResult = await github.checks.listForRef({
              owner: "${{ env.TEST_ORG }}",
              repo: repoName,
              ref: "${{ steps.push-content.outputs.ref }}"
            });
  
            // Delete repository
            github.repos.delete({
              owner: "${{ env.TEST_REPOSITORY }}",
              repo: repoName
            });
            
            // Check whether check is created by this app
            if(!checkResult.data.check_runs.some(check => check.app.id === ${{ matrix.APP_ID }})) {
              core.setFailed("central workflow wasn't triggered");
            }
            
